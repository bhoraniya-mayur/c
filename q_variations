The standard queue data structure has the following variations:
->Double-ended queue
->Circular queue

Double-ended queue:
In a standard queue, a character is inserted at the back and deleted in the front. However, in a double-ended queue, characters 
can be inserted and deleted from both the front and back of the queue.

Functions supported:

Insert at back:
void insert_at_back(int queue[], int element, int &rear, int array_size){
    if(rear == array_size)
        printf("Overflow\n");
    else{
        queue[rear] = element;
        rear = rear + 1;
    }
}

Delete from back:
void delete_from_back(int queue[], int &rear, int front){
    if(front == rear)
        printf("Underflow\n");
    else{
        rear = rear - 1;
        queue[rear] = 0;
    }
}

Insert at front:
void insert_at_front(int queue[], int &rear, int &front, int element, int array_size){
    if(rear == array_size)
        printf("Overflow\n");
    else{
        for(int i=rear; i>front; i--)
            queue[i] = queue[i-1];
        queue[front] = element;
        rear = rear+1;
    }
}

Delete from front:
void delete_front_front(int queue[], int &front, int &rear){
    if(front == rear)
        printf("Underflow\n");
    else{
        queue[front] = 0;
        front = front + 1;
    }
}

Get front element:
int get_front(int queue[], int front){
    return queue[front];
}

Get rear element:
int get_rear(int queue[], int rear){
    return queue[rear-1];
}

Circular queues:
A circular queue is an improvement over the standard queue structure. In a standard queue, when an element is deleted, 
the vacant space is not reutilized. However, in a circular queue, vacant spaces are reutilized.While inserting elements, when 
you reach the end of an array and you need to insert another element, you must insert that element at the beginning (given 
that the first element has been deleted and the space is vacant).

Variables used:In addition to all the variables that are used in a standard queue, circular queues support the following 
variable:
count: Number of elements present in a queue

Functions supported:
Circular queues support all the functions that are supported by standard queues, however, there is a difference in the 
implementation of these functions.

Enqueue:
void enqueue(int queue[], int element, int& rear, int arraySize, int& count) {
    if(count == arraySize)            // Queue is full
            printf(“OverFlow\n”);
    else{
        queue[rear] = element;
        rear = (rear + 1)%arraySize;
        count = count + 1;
    }
}

Dequeue:
void dequeue(int queue[], int& front, int rear, int& count) {
    if(count == 0)            // Queue is empty
        printf(“UnderFlow\n”);
    else {
        queue[front] = 0;        // Delete the front element
        front = (front + 1)%arraySize;
        count = count - 1;
    }
}

Front:
int Front(int queue[], int front) {
    return queue[front];
}

Size:
int size(int count) {
    return count;
}

IsEmpty:
bool isEmpty(int count) {
    return (count == 0);
}
